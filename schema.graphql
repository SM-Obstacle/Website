type Banishment {
	id: Int!
	dateBan: NaiveDateTime!
	duration: Int
	wasReprieved: Boolean!
	reason: String!
	player: Player
	banishedBy: Player
}


"""
Represents the time on a checkpoint on a map associated to a record.
"""
type CheckpointTime {
	"""
	The checkpoint number. It starts at 0.
	"""
	cpNum: Int!
	"""
	The time in milliseconds on this checkpoint.
	"""
	time: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Event {
	handle: String!
	cooldown: Int
	admins: [Player!]!
	categories: [EventCategory!]!
	editions: [EventEdition!]!
	lastEdition: EventEdition
	edition(editionId: Int!): EventEdition
}

"""
An event category in an event.
"""
type EventCategory {
	"""
	The handle of the category.
	"""
	handle: String!
	"""
	The name of the category.
	"""
	name: String!
	"""
	The optional URL to the banner image.
	
	This is currently used in the Obstacle Titlepack menu.
	"""
	bannerImgUrl: String
	"""
	The hex color of the category.
	
	For example, for the White category, it is "fff".
	"""
	hexColor: String
}

type EventEdition {
	id: Int!
	mappack: Mappack
	admins: [Player!]!
	event: Event!
	name: String!
	subtitle: String
	startDate: NaiveDateTime!
	bannerImgUrl: String
	expiresIn: Int
	player(login: String!): EventEditionPlayer!
	map(gameId: String!): EventEditionMap!
	categories: [EventCategory!]!
}

type EventEditionMap {
	edition: EventEdition!
	map: Map!
	linkToOriginal: Boolean!
	originalMap: Map
	records(rankSortBy: SortState, dateSortBy: SortState): [RankedRecord!]!
	medalTimes: MedalTimes
}

type EventEditionMapExt {
	map: Map!
	lastRank: Int!
	medalTimes: MedalTimes
}

type EventEditionPlayer {
	player: Player!
	rank: Int!
	rankAvg: Float!
	mapFinished: Int!
	worstRank: Int!
	categorizedRanks: [EventEditionPlayerCategorizedRank!]!
	unfinishedMaps: [EventEditionMapExt!]!
}

type EventEditionPlayerCategorizedRank {
	categoryName: String!
	bannerImgUrl: String
	hexColor: String
	nbMaps: Int!
	ranks: [EventEditionPlayerRank!]!
}

type EventEditionPlayerRank {
	rank: Int!
	time: Int!
	map: EventEditionMapExt!
}




type Map implements Node {
	id: ID!
	gameId: String!
	playerId: ID!
	cpsNumber: Int
	player: Player!
	name: String!
	relatedEventEditions: [RelatedEdition!]!
	averageRating: [PlayerRating!]!
	records(rankSortBy: SortState, dateSortBy: SortState): [RankedRecord!]!
}

type MapConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MapEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Map!]!
}

"""
An edge in a connection.
"""
type MapEdge {
	"""
	The item at the end of the edge
	"""
	node: Map!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Mappack {
	nbMaps: Int!
	mxAuthor: String
	mxCreatedAt: NaiveDateTime
	mxName: String
	leaderboard: [MappackPlayer!]!
	player(login: String!): MappackPlayer!
	nextUpdateIn: Int
}

type MappackMap {
	rank: Int!
	lastRank: Int!
	map: Map!
}

type MappackPlayer {
	rank: Int!
	player: Player!
	ranks: [MappackMap!]!
	rankAvg: Float!
	mapFinished: Int!
	worstRank: Int!
}

"""
Represents the medal times, in milliseconds.
"""
type MedalTimes {
	"""
	The time of the bronze medal.
	"""
	bronzeTime: Int!
	"""
	The time of the silver medal.
	"""
	silverTime: Int!
	"""
	The time of the gold medal.
	"""
	goldTime: Int!
	"""
	The time of the champion/author medal.
	"""
	championTime: Int!
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

interface Node {
	id: ID!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Player implements Node {
	id: ID!
	login: String!
	name: String!
	zonePath: String
	banishments: [Banishment!]!
	role: PlayerRole!
	maps(after: String, before: String, first: Int, last: Int): MapConnection!
	records(dateSortBy: SortState): [RankedRecord!]!
}

type PlayerConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PlayerEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Player!]!
}

"""
An edge in a connection.
"""
type PlayerEdge {
	"""
	The item at the end of the edge
	"""
	node: Player!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type PlayerRating {
	kind: RatingKind!
	rating: Float!
}

enum PlayerRole {
	PLAYER
	MODERATOR
	ADMIN
}

type QueryRoot {
	eventEditionFromMxId(mxId: Int!): EventEdition
	mappack(mappackId: String!): Mappack!
	event(handle: String!): Event!
	events: [Event!]!
	players(after: String, before: String, first: Int, last: Int): PlayerConnection!
	maps(after: String, before: String, first: Int, last: Int): MapConnection!
	node(id: ID!): Node
	record(recordId: Int!): RankedRecord!
	map(gameId: String!): Map!
	player(login: String!): Player!
	records(dateSortBy: SortState): [RankedRecord!]!
}

type RankedRecord {
	id: Int!
	rank: Int!
	map: Map!
	player: Player!
	averageCpsTimes: [CheckpointTime!]!
	cpsTimes: [CheckpointTime!]!
	time: Int!
	respawnCount: Int!
	tryCount: Int!
	recordDate: DateTime!
	flags: Int!
}

"""
The rating kinds of a player on a map.

This isn't yet used in-game.
"""
enum RatingKind {
	"""
	The rating of the route.
	"""
	ROUTE
	"""
	The rating of the decoration.
	"""
	DECO
	"""
	The rating of the smoothness.
	"""
	SMOOTHNESS
	"""
	The rating of the difficulty.
	"""
	DIFFICULTY
}

type RelatedEdition {
	map: Map!
	"""
	Tells the website to redirect to the event map page instead of the regular map page.
	
	This avoids to have access to the `/map/X_benchmark` page for example, because a Benchmark
	map won't have any record in this context. Thus, it should be redirected to
	`/event/benchmark/2/map/X_benchmark`.
	"""
	redirectToEvent: Boolean!
	edition: EventEdition!
}

enum SortState {
	SORT
	REVERSE
}


directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: QueryRoot
}
